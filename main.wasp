app noteapp {
  wasp: {
    version: "^0.11.4"
  },
  title: "noteapp",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
    notes    Note[]
psl=}

entity Note {=psl
    id          Int    @id @default(autoincrement())
    description String
    content     String
    user        User   @relation(fields: [userId], references: [id])
    userId      Int
psl=}

action createNote {
  fn: import { createNote } from "@server/actions.js",
  entities: [Note]
}

action updateNote {
  fn: import { updateNote } from "@server/actions.js",
  entities: [Note]
}

action deleteNote {
  fn: import { deleteNote } from "@server/actions.js",
  entities: [Note]
}

query getNotes {
  fn: import { getNotes } from "@server/queries.js",
  entities: [Note]
}

query getNote {
  fn: import { getNote } from "@server/queries.js",
  entities: [Note]
}

route HomePage { path: "/", to: Home } 
page Home {
  component: import { Home } from "@client/pages/Home.jsx",
  authRequired: true
}

route NoteRoute { path: "/note/:noteId", to: NotePage }
page NotePage {
  component: import { Note } from "@client/pages/Note.jsx",
  authRequired: true
}